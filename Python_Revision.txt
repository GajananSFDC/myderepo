====================================================================================================================================
********************************************************Python EveryThing***********************************************************
====================================================================================================================================
ЁЯОУ. Variable рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?
Variable рдПрдХ рдирд╛рдо рд╣реЛрддрд╛ рд╣реИ рдЬреЛ рдХрд┐рд╕реА value рдХреЛ store рдХрд░рддрд╛ рд╣реИ тАФ рдЬреИрд╕реЗ memory рдореЗрдВ рдХреЛрдИ container рдпрд╛ boxред
--------------------------------------------------------------------------------------
ЁЯФ╣ Data Types in Python
Python рдореЗрдВ рд╣рд░ Variable рдХрд╛ рдПрдХ Data Type рд╣реЛрддрд╛ рд╣реИред
-----------------------------------------------------------
| Type    | Example         | Meaning                     |
| ------- | --------------- | --------------------------- |
| `int`   | `10`, `-2`      | Integer (рдкреВрд░рд╛ рдирдВрдмрд░)         |
| `float` | `3.14`, `-7.5`  | Decimal (рджрд╢рдорд▓рд╡ рд╕рдВрдЦреНрдпрд╛)      |
| `str`   | `"Hello"`       | String (text/рд╢рдмреНрдж)          |
| `bool`  | `True`, `False` | Boolean (рд╣рд╛рдБ/рдирд╛)            |
| `list`  | `[1, 2, 3]`     | List of values (array рдЬреИрд╕реА) |
---------------------------------------------------------
--------------------------------------------------------------------------------------
ЁЯФ╣ Type Casting рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?
Type Casting рдХрд╛ рдорддрд▓рдм рд╣реЛрддрд╛ рд╣реИ рдПрдХ data type рдХреЛ рджреВрд╕рд░реЗ рдореЗрдВ convert рдХрд░рдирд╛ред
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
ЁЯФС Operators рдХреНрдпрд╛ рд╣реЛрддреЗ рд╣реИрдВ?
Operators рд╡реЛ symbols рд╣реЛрддреЗ рд╣реИрдВ рдЬреЛ variables рдФрд░ values рдкрд░ operations (рдЬреИрд╕реЗ рдЬреЛрдбрд╝рдирд╛, рддреБрд▓рдирд╛ рдХрд░рдирд╛) рдХрд░рддреЗ рд╣реИрдВред
------------------------------------------------------------------------------------------------
| No. | Category             | Example Symbols                     |                           |
| --- | -------------------- | ----------------------------------- | ------------------------- |
| 1.  | Arithmetic Operators | `+`, `-`, `*`, `/`, `//`, `%`, `**` |                           |
| 2.  | Comparison Operators | `==`, `!=`, `>`, `<`, `>=`, `<=`    |                           |
| 3.  | Logical Operators    | `and`, `or`, `not`                  |                           |
| 4.  | Bitwise Operators    | `&`, \`                             | `, `^`, `\~`, `<<`, `>>\` |
-------------------------------------------------------------------------------------------------
ЁЯзо 1. Arithmetic Operators (рдЧрдгрд┐рддреАрдп рдСрдкрд░реЗрдЯрд░):-
----------------------------------------------------
| Operator | Name      | Example  | Result          |
| -------- | --------- | -------- | --------------- |
| `+`      | Addition  | `5 + 2`  | `7`             |
| `-`      | Subtract  | `5 - 2`  | `3`             |
| `*`      | Multiply  | `5 * 2`  | `10`            |
| `/`      | Divide    | `5 / 2`  | `2.5`           |
| `//`     | Floor Div | `5 // 2` | `2`             |
| `%`      | Modulo    | `5 % 2`  | `1` (remainder) |
| `**`     | Power     | `2 ** 3` | `8` (2^3)       |
-----------------------------------------------------
ЁЯФБ 2. Comparison Operators (рддреБрд▓рдирд╛ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдСрдкрд░реЗрдЯрд░)
a = 10
b = 20

print(a == b)   # False
print(a != b)   # True
print(a > b)    # False
print(a < b)    # True
print(a >= 10)  # True
print(b <= 15)  # False
------------------------------------------------------------------------------------------------------
ЁЯФЧ 3. Logical Operators (рддрд╛рд░реНрдХрд┐рдХ рдСрдкрд░реЗрдЯрд░)
---------------------------------------------------------------
| Operator | Usage            | Meaning                       |
| -------- | ---------------- | ----------------------------- |
| `and`    | `True and False` | рджреЛрдиреЛрдВ рд╕рд╣реА рд╣реЛрдВ рддрднреА True            |
| `or`     | `True or False`  | рдХреЛрдИ рдПрдХ рднреА рд╕рд╣реА рд╣реЛ рддреЛ True       |
| `not`    | `not True`       | рдЙрд▓реНрдЯрд╛ рдХрд░ рджреЗрддрд╛ рд╣реИ (TrueтЖТFalse)    |
--------------------------------------------------------------
тЪЩя╕П 4. Bitwise Operators (Binary рдкрд░ рдХрд╛рдо рдХрд░рддреЗ рд╣реИрдВ)
-------------------------------------------------------------
| Operator | Description  | Example         |     |         |
| -------- | ------------ | --------------- | --- | ------- |
| `&`      | AND          | `5 & 3` тЖТ `1`   |     |         |
| \`       | \`           | OR              | \`5 | 3`тЖТ`7\` |
| `^`      | XOR          | `5 ^ 3` тЖТ `6`   |     |         |
| `~`      | NOT (Invert) | `~5` тЖТ `-6`     |     |         |
| `<<`     | Left Shift   | `5 << 1` тЖТ `10` |     |         |
| `>>`     | Right Shift  | `5 >> 1` тЖТ `2`  |     |         |
-------------------------------------------------------------
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
ЁЯОУ. Conditional Statements in Python (if, elif, else):-
---------------------------------------------------------
ЁЯФС рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ Conditional Statement?
рдЬрдм рдЖрдкрдХреЛ рдХрд┐рд╕реА рд╕реНрдерд┐рддрд┐ (condition) рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдХреЛрдб рдЪрд▓рд╛рдирд╛ рд╣реЛ рдпрд╛ рдирд╛ рдЪрд▓рд╛рдирд╛ рд╣реЛ, рддрдм рд╣рдо if, elif, else рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреЗ рд╣реИрдВред

ЁЯза Example:
рдЕрдЧрд░ рдмрд╛рд░рд┐рд╢ рд╣реЛ рд░рд╣реА рд╣реИ тЖТ рдЫрд╛рддрд╛ рд▓реЛ
рдирд╣реАрдВ рд╣реЛ рд░рд╣реА тЖТ рдмрд╛рд╣рд░ рдЬрд╛рдУ

if condition:
    # рдЕрдЧрд░ condition True рд╣реИ, рддреЛ рдпреЗ block рдЪрд▓реЗрдЧрд╛
elif another_condition:
    # рдЕрдЧрд░ рдКрдкрд░ рд╡рд╛рд▓рд╛ False рд╣реЛ рдЧрдпрд╛, рддреЛ рдпреЗ рдЪреЗрдХ рд╣реЛрдЧрд╛
else:
    # рдКрдкрд░ рд╕рдм False рд╣реБрдП рддреЛ рдпреЗ block рдЪрд▓реЗрдЧрд╛
-----------------------------------------------------------
ЁЯза Indentation рдмрд╣реБрдд рдЬрд░реВрд░реА рд╣реИ!
Python рдореЗрдВ indentation (space/tab) рд╕реЗ рдкрддрд╛ рдЪрд▓рддрд╛ рд╣реИ рдХрд┐ рдХреМрди рд╕рд╛ block рдХрд╣рд╛рдБ рд╣реИред
-----------------------------------------------------------
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
ЁЯОУ. Loops (for, while) & Loop Control
-----------------------------------------------------------------
ЁЯФС Loops рдХреНрдпрд╛ рд╣реЛрддреЗ рд╣реИрдВ?
рдЬрдм рдЖрдкрдХреЛ рдХреЛрдИ рдХрд╛рдо рдмрд╛рд░-рдмрд╛рд░ рджреЛрд╣рд░рд╛рдирд╛ (repeat) рд╣реЛрддрд╛ рд╣реИ, рддрдм рд╣рдо loop рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВред
-----------------------------------------------------------------
| Loop Type    | рдЙрдкрдпреЛрдЧ рдХрдм рдХрд░реЗрдВ                                    |
| ------------ | -----------------------------------------------|
| `for` loop   | рдЬрдм рдЖрдкрдХреЛ рдкрддрд╛ рд╣реИ рдХрд┐рддрдиреА рдмрд╛рд░ рджреЛрд╣рд░рд╛рдирд╛ рд╣реИ                 |
| `while` loop | рдЬрдм рдЖрдк condition true рд░рд╣рдиреЗ рддрдХ рджреЛрд╣рд░рд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реЛ      |
-----------------------------------------------------------------
ЁЯза For Loop:-

for variable in sequence:
    # repeat this block

eg:-

for i in range(1, 6):
    print(i)
----------------------------------------------------------------------------------
ЁЯФБ 2. while Loop:-

while condition:
    # block рдЪрд▓рддрд╛ рд░рд╣реЗрдЧрд╛ рдЬрдм рддрдХ condition True рд╣реИ

eg:-

i = 1
while i <= 5:
    print(i)
    i += 1
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
ЁЯОУ. Functions & Lambda Expressions:-
----------------------------------------------------------------------------------
ЁЯза 1. Function рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?
Function рдПрдХ block of code рд╣реЛрддрд╛ рд╣реИ рдЬреЛ рдХрд┐рд╕реА рдХрд╛рдо рдХреЛ repeat рдпрд╛ reuse рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрдирд╛рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

тЬЕ Reusable
тЬЕ Organized
тЬЕ Maintainable

Syntax:-

def function_name(parameters):
    # Code block
    return result
------------------------------------------	
Eg:-
ЁЯЯвNormal Function:-

def greet():
    print("Hello, Welcome to Python!")

greet()  # Call the function
-----------------------------------------
ЁЯЯвFunction with Parameter:-

def greet(name):
    print("Hello", name)

greet("Gajanan")
------------------------------------------------------------------------------------
тЪб Lambda Functions (Anonymous Functions)
Lambda рдПрдХ рдЫреЛрдЯрд╛ function рд╣реЛрддрд╛ рд╣реИ рдЬрд┐рд╕реЗ рдЖрдк рдПрдХ рд▓рд╛рдЗрди рдореЗрдВ define рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ тАФ рдирд╛рдо рдХреЗ рдмрд┐рдирд╛ред
Syntax:-

lambda arguments : expression

---------------------------------------
Eg:- Adding Two Number 

add = lambda a, b: a + b
print(add(3, 4))  # Output: 7
--------------------------------------------------------
| Concept         | Detail                              |
| --------------- | ----------------------------------- |
| `def`           | Function define рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП           |
| `return`        | Function рд╕реЗ value рд╡рд╛рдкрд╕ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП     |
| `lambda`        | рдПрдХ-рд▓рд╛рдЗрди рдЫреЛрдЯрд╛ function                |
| `default param` | рдЕрдЧрд░ user input рдирд╛ рджреЗ рддреЛ рднреА рдЪрд▓реЗ         |
---------------------------------------------------------
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
ЁЯОУ. List, Tuple, Dictionary, Set:-
------------------------------------------------------
ЁЯФС рдХреНрдпрд╛ рд╣реЛрддреЗ рд╣реИрдВ Data Structures?
Python рдореЗрдВ рд╣рдо рдХрдИ values рдХреЛ рдПрдХ рд╕рд╛рде store рдФрд░ manage рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП data structures рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреЗ рд╣реИрдВред

Data Structures:-
---------------------------------------------------------------------------------------------------
| Type       | Ordered | Mutable    | Duplicates Allowed  | Syntax Example     | Identifide as     |
| ---------- | ------- | ---------- | ------------------- | ------------------ |-------------------
| List       | тЬЕ Yes   | тЬЕ Yes   | тЬЕ Yes              | `[1, 2, 3]`        | Squere Bracket [] |
| Tuple      | тЬЕ Yes   | тЭМ No    | тЬЕ Yes              | `(1, 2, 3)`        | Round Bracket  ()  |
| Dictionary | тЬЕ Yes   | тЬЕ Yes   | тЭМ Keys are unique  | `{"a": 1, "b": 2}` | Curly Bracket  {}  |
| Set        | тЭМ No    | тЬЕ Yes   | тЭМ No duplicates    | `{1, 2, 3}`        | Curly Bracket  {}  |
-----------------------------------------------------------------------------------------------------
Difference:- 
------------------------------------------------------------
| Feature    | List   | Tuple  | Dictionary       | Set    |
| ---------- | ------ | ------ | ---------------- | -----  |
| Syntax     | `[ ]`  | `( )`  | `{key: value}`   | `{ }`  |
| Order      | тЬЕ Yes | тЬЕ Yes | тЬЕ Yes          | тЭМ No  |
| Duplicate  | тЬЕ Yes | тЬЕ Yes | тЭМ Keys тАУ No    | тЭМ No  |
| Changeable | тЬЕ Yes | тЭМ No  | тЬЕ Yes          | тЬЕ Yes |
------------------------------------------------------------
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв 
ЁЯОУ. String Manipulation:-
-----------------------------------------
ЁЯФд String рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?
Python рдореЗрдВ string рдПрдХ character рдХрд╛ sequence рд╣реЛрддрд╛ рд╣реИ тАФ рдорддрд▓рдм words, sentences рдпрд╛ рдХреЛрдИ рднреА textред

ЁЯФН Accessing Characters (Indexing)
Python рдореЗрдВ indexing 0 рд╕реЗ рд╢реБрд░реВ рд╣реЛрддреА рд╣реИ:-

text = "Python"
print(text[0])  # Output: P
print(text[-1]) # Output: n (last character)
---------------------------------------------------
тЬВя╕П Slicing:-
text = "Python"
print(text[0:3])   # Pyt (index 0 to 2)
print(text[:4])    # Pyth
print(text[2:])    # thon
---------------------------------------------------
String Methods:-
---------------------------------------------------------
| Method         | Use                                   |
| -------------- | ------------------------------------- |
| `upper()`      | рд╕рднреА characters рдХреЛ uppercase рдмрдирд╛рддрд╛ рд╣реИ    |
| `lower()`      | рд╕рднреА characters рдХреЛ lowercase рдмрдирд╛рддрд╛ рд╣реИ    |
| `capitalize()` | рд╕рд┐рд░реНрдл рдкрд╣рд▓рд╛ letter capital               |
| `title()`      | рд╣рд░ word рдХрд╛ рдкрд╣рд▓рд╛ letter capital         |
| `strip()`      | leading/trailing spaces рд╣рдЯрд╛рддрд╛ рд╣реИ        |
| `replace()`    | рдкреБрд░рд╛рдиреЗ рдХреЛ рдирдП рд╕реЗ рдмрджрд▓рддрд╛ рд╣реИ                   |
| `find()`       | рдХрд┐рд╕реА substring рдХрд╛ рдкрд╣рд▓рд╛ index рдмрддрд╛рддрд╛ рд╣реИ    |
| `split()`      | string рдХреЛ list рдореЗрдВ рдмрджрд▓рддрд╛ рд╣реИ              |
| `join()`       | list рдХреЛ рд╡рд╛рдкрд╕ string рдореЗрдВ рдЬреЛрдбрд╝рддрд╛ рд╣реИ          |
| `startswith()` | рдХреНрдпрд╛ string рдХрд┐рд╕реА рдЪреАрдЬ рд╕реЗ рд╢реБрд░реВ рд╣реЛрддреА рд╣реИ?       |
| `endswith()`   | рдХреНрдпрд╛ string рдХрд┐рд╕реА рдЪреАрдЬ рдкрд░ рдЦрддреНрдо рд╣реЛрддреА рд╣реИ?      |
---------------------------------------------------------
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
ЁЯОУ. Exception Handling:- (try, except, finally):-
---------------------------------------------------
ЁЯФе Exception рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?
рдЬрдм Python рдореЗрдВ рдХреЛрдИ error рдЖрддреА рд╣реИ runtime рдкрд░, рддреЛ рдЙрд╕реЗ Exception рдХрд╣рд╛ рдЬрд╛рддрд╛ рд╣реИред
рдЕрдЧрд░ рд╣рдо рдЙрд╕реЗ handle рдирд╣реАрдВ рдХрд░рддреЗ, рддреЛ рд╣рдорд╛рд░рд╛ рдкреНрд░реЛрдЧреНрд░рд╛рдо crash рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ тЭМ

Syntax:-

try:
    # рдЬреЛ risky code рд╣реИ
except ExceptionType:
    # рдЕрдЧрд░ error рдЖрддреА рд╣реИ рддреЛ рдпреЗ block рдЪрд▓реЗрдЧрд╛
finally:
    # рдпреЗ block рд╣рдореЗрд╢рд╛ рдЪрд▓реЗрдЧрд╛ (рдЪрд╛рд╣реЗ error рд╣реЛ рдпрд╛ рдирд╛ рд╣реЛ)
----------------------------------------------------------
Exception:-
----------------------------------------------------------------
| Exception Type      | рдХрдм рд╣реЛрддрд╛ рд╣реИ?                              |
| ------------------- | --------------------------------------- |
| `ZeroDivisionError` | рдЬрдм рдЖрдк 0 рд╕реЗ divide рдХрд░рддреЗ рд╣реИрдВ                |
| `ValueError`        | рдЧрд▓рдд type рдХрд╛ value convert рдХрд░рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ |
| `TypeError`         | рдЧрд▓рдд type рдХреЗ variables рд╕реЗ operation рдХрд░рдирд╛ |
| `IndexError`        | list/tuple рдХреЗ рдмрд╛рд╣рд░ access рдХрд░рдирд╛          |
| `KeyError`          | dictionary рдореЗрдВ рдирд╛-рдореМрдЬреВрдж key access рдХрд░рдирд╛   |
| `FileNotFoundError` | рдЬрдм file рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реЛрддреА                  |
--------------------------------------------------------------
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
ЁЯОУ.File Handling:- 
--------------------------------
ЁЯФС Python рдореЗрдВ File Handling рдХреНрдпрд╛ рд╣реЛрддреА рд╣реИ?
рдЬрдм рдЖрдк Python рд╕реЗ рдХреЛрдИ Text File, CSV File, рдпрд╛ JSON File рдХреЛ Read рдпрд╛ Write рдХрд░рддреЗ рд╣реЛ тАФ рдЙрд╕реЗ File Handling рдХрд╣рддреЗ рд╣реИрдВред

рдЗрд╕рд╕реЗ рдЖрдк real-world data (logs, reports, configurations, etc.) рдХреЛ manage рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

ЁЯФС. Modes Of File Handling:-
-----------------------------------------------------
| Mode  | рдХрд╛рдо                                       |
| ----- | ----------------------------------------- |
| `"r"` | Read (default)                            |
| `"w"` | Write (рдкреБрд░рд╛рдирд╛ data рдорд┐рдЯрд╛ рджреЗрдЧрд╛)             		|
| `"a"` | Append (рдкреБрд░рд╛рдирд╛ data рд░рд╣реЗрдЧрд╛, рдирдпрд╛ рдЬреБрдбрд╝реЗрдЧрд╛)   		|
| `"x"` | Exclusive creation (рдЕрдЧрд░ file рд╣реИ рддреЛ error)  |
| `"b"` | Binary mode (images, pdf)                 |
-----------------------------------------------------
ЁЯЯвWrite To TEXT File:-

with open("myfile.txt", "w") as f
	f.write("Hello, This is Day 9 of Python Learning.\n")
	f.write("File handling is easy.")
	f.close()
--------------------------------------------------------
Read From The Text File:-

with open("myfile.txt", "r")as f:
	data = f.read()
	print(data)
	f.close()
---------------------------------------------------------
Append to The File:-

with open("myfile.txt", "a")as f:
	f.write("\nAdding one more line.")
	f.close()
---------------------------------------------------------
ЁЯЯв CSV File:- 

for Csv File We Have to Create Writer Object to Write

eg:- 
with open("myfile.csv", "w") as f
	writer = csv.writer(f)
	writer.write("Hello, This is Day 9 of Python Learning.\n")
	writer.write("File handling is easy.")
	writer.close()
------------------------------------------------------------
ЁЯЯв JSON File:- json.dump = to write 

import json

data = {
    "name": "Gajanan",
    "role": "Data Engineer",
    "skills": ["Python", "SQL", "Spark"]
}

with open("profile.json", "w") as file:
    json.dump(data, file, indent=4)
---------------------------------------------------------------------
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
ЁЯОУ. Object-Oriented Programming:-

тЬЕ OOP рдХреА 4 рдореБрдЦреНрдп Pillars:-

Class тАУ Blueprint (Design)

Object тАУ Real Entity (рдЬреЛ Class рд╕реЗ рдмрдирд╛ рд╣реЛ)

Inheritance тАУ рд╡рд┐рд░рд╛рд╕рдд (Parent рд╕реЗ рдЧреБрдг рд▓реЗрдирд╛)

Encapsulation & Polymorphism тАУ рд╕реБрд░рдХреНрд╖рд╛ рдФрд░ рдмрд╣реБрд░реВрдкрддрд╛.
---------------------------------------------------------
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
ЁЯОУ. Python Modules & Packages:-

ЁЯФН Module рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?
Python рдореЗрдВ module рдПрдХ .py рдлрд╛рдЗрд▓ рд╣реЛрддреА рд╣реИ рдЬрд┐рд╕рдореЗрдВ рдЖрдк functions, variables, classes рдХреЛ рдЕрд▓рдЧ рд╕реЗ рд▓рд┐рдЦрддреЗ рд╣реИрдВ рддрд╛рдХрд┐ рдмрд╛рд░-рдмрд╛рд░ reuse рдХрд░ рд╕рдХреЛред
рдПрдХ module = рдПрдХ Python file (.py)


ЁЯФМ Built-in Modules:-

math тАУ рдЧрдгрд┐рддреАрдп calculation
random тАУ random рдирдВрдмрд░, choice, shuffle
datetime тАУ рддрд╛рд░реАрдЦ рдФрд░ рд╕рдордп
os тАУ file system interaction
sys тАУ system related functions
------------------------------------------------------------------------------
ЁЯФМ. To Import Module:- 

1. Basic Import:- 

import math
print(math.sqrt(25))  # 5.0
-------------------------------
2. from Import:- 

from math import sqrt
print(sqrt(49))       # 7.0
-------------------------------
3. as alias:-

import math as m
print(m.pow(2, 3))    # 8.0
---------------------------------------------------------------------------------
ЁЯУж Python Package рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?
Package тАУ рдПрдХ рдРрд╕рд╛ folder рдЬрд┐рд╕рдореЗрдВ modules (Python files) рд╣реЛрддреЗ рд╣реИрдВ, рдФрд░ рдЙрд╕рдХреЗ рдЕрдВрджрд░ рдПрдХ __init__.py рдлрд╛рдЗрд▓ рд╣реЛрддреА рд╣реИред

Real-world рдореЗрдВ Pandas, Numpy, Matplotlib рд╕рдм packages рд╣реИрдВред
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
ЁЯОУ. Final Mini Project + Interview Prep:-

ЁЯФз Part 1: Mini Project тАУ Text Analyzer App
рдПрдХ Python рдкреНрд░реЛрдЧреНрд░рд╛рдо рдмрдирд╛рдУ рдЬреЛ рдХрд┐рд╕реА рднреА рджрд┐рдП рдЧрдП text рдХрд╛:
Total characters, words, sentences рдЧрд┐рдиреЗ
Word frequency count рджрд┐рдЦрд╛рдП
рдФрд░ longest word рдмрддрд╛рдП
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
ЁЯОп Part 2: Python Interview Questions (with Answers)
тЬЕ Beginner Level:
Python рдПрдХ interpreted language рд╣реИ рдпрд╛ compiled?
тЖТ Interpreted

List рдФрд░ Tuple рдореЗрдВ рдХреНрдпрд╛ рдлрд░реНрдХ рд╣реИ?
тЖТ List mutable рд╣реИ, Tuple immutable рд╣реЛрддрд╛ рд╣реИ.

is vs == рдХреНрдпрд╛ рдлрд░реНрдХ рд╣реИ?
тЖТ == compares values, is compares memory reference.

Python рдореЗрдВ function рдХреИрд╕реЗ declare рдХрд░рддреЗ рд╣реИрдВ?
тЖТ def func_name():

Lambda function рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?
тЖТ One-line anonymous function: lambda x: x+1

тЬЕ Intermediate Level:
*args рдФрд░ **kwargs рдХрд╛ use рдХреНрдпрд╛ рд╣реИ?
тЖТ *args = multiple positional arguments
тЖТ **kwargs = multiple keyword arguments

File handling рдореЗрдВ with block рдХреНрдпреЛрдВ use рдХрд░рддреЗ рд╣реИрдВ?
тЖТ File рдХреЛ automatically close рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП

Python рдореЗрдВ exception handling рдХреИрд╕реЗ рд╣реЛрддреА рд╣реИ?
тЖТ try, except, finally, raise

Class рдФрд░ Object рдореЗрдВ рдХреНрдпрд╛ рдлрд░реНрдХ рд╣реИ?
тЖТ Class = design / blueprint, Object = instance

Constructor method рдХрд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ Python рдореЗрдВ?
тЖТ __init__
====================================================================================================================================
ЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯвЁЯЯв
====================================================================================================================================
ЁЯУШ Python Core Notes (Day 1 to Day 12)

---

## тЬЕ Day 1 тАУ Variables, Data Types, Type Casting

* Variables: рдирд╛рдо рдЬреЛ рдХрд┐рд╕реА value рдХреЛ hold рдХрд░рддрд╛ рд╣реИ

```python
name = "Gajanan"
age = 25
```

* Data Types: `int`, `float`, `str`, `bool`, `list`, `tuple`, `dict`, `set`, `None`
* Type Casting: рдПрдХ type рдХреЛ рджреВрд╕рд░реЗ рдореЗрдВ рдмрджрд▓рдирд╛

```python
x = int("5")
y = str(100)
```

---

## тЬЕ Day 2 тАУ Operators

* Arithmetic: `+`, `-`, `*`, `/`, `//`, `%`, `**`
* Comparison: `==`, `!=`, `>`, `<`, `>=`, `<=`
* Logical: `and`, `or`, `not`
* Bitwise: `&`, `|`, `^`, `<<`, `>>`
* Assignment: `=`, `+=`, `-=`, `*=`, etc.

---

## тЬЕ Day 3 тАУ Conditional Statements

```python
if age > 18:
    print("Adult")
elif age == 18:
    print("Just turned adult")
else:
    print("Not adult")
```

---

## тЬЕ Day 4 тАУ Loops

* For Loop

```python
for i in range(5):
    print(i)
```

* While Loop

```python
while x < 5:
    print(x)
    x += 1
```

---

## тЬЕ Day 5 тАУ Functions & Lambda

```python
def add(a, b):
    return a + b

square = lambda x: x*x
```

---

## тЬЕ Day 6 тАУ Data Structures

* List: `[]`, mutable
* Tuple: `()`, immutable
* Dictionary: `{key: value}`
* Set: `{}`, no duplicates

---

## тЬЕ Day 7 тАУ String Manipulation

```python
name = "Python"
print(name.upper())
print(name[0:3])
print(name.replace("P", "J"))
```

---

## тЬЕ Day 8 тАУ Exception Handling

```python
try:
    a = 5 / 0
except ZeroDivisionError:
    print("Can't divide by zero")
finally:
    print("Done")
```

---

## тЬЕ Day 9 тАУ File Handling

* Text:

```python
with open("file.txt", "w") as f:
    f.write("Hello")
```

* CSV:

```python
import csv
with open("data.csv", "w", newline="") as f:
    writer = csv.writer(f)
    writer.writerow(["Name", "Age"])
```

* JSON:

```python
import json
with open("data.json", "w") as f:
    json.dump({"name": "Gajanan"}, f)
```

---

## тЬЕ Day 10 тАУ OOP in Python

```python
class Student:
    def __init__(self, name):
        self.name = name

    def greet(self):
        print("Hello", self.name)
```

* Inheritance:

```python
class A:
    def show(self):
        print("A")
class B(A):
    def showB(self):
        print("B")
```

---

## тЬЕ Day 11 тАУ Modules & Packages

* Import:

```python
import math
from math import sqrt
```

* Custom Module:

```python
# mymath.py
def add(x, y):
    return x + y
```

---

## тЬЕ Day 12 тАУ Mini Project & Interview

* Project: Text Analyzer

```python
def text_analyzer(text):
    print("Characters:", len(text))
    print("Words:", len(text.split()))
```

---

ЁЯУЛ Python Core Interview Questions:

1. Difference between list and tuple?
2. What is a lambda function?
3. Explain \*args and \*\*kwargs.
4. What are Python modules and packages?
5. Explain OOP pillars: class, object, inheritance.
6. How is exception handled?
7. File handling methods?
8. Mutable vs Immutable?
9. Difference: is vs == ?
10. Python is dynamically typed. What does it mean?

---

ЁЯОЙ Congratulations! You've covered all core topics in Python.




















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































